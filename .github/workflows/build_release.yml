name: Build and Release

on:
  push:
  pull_request:

jobs:
#########################################################################################
## Build Firmware
#########################################################################################
  build:
    runs-on: ubuntu-latest

    steps:    
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Set variables
      id: vars
      run: |
        echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Cache pip & platformIO cache files
      uses: actions/cache@v3.3.1
      with:
        path: |
            ~/.cache/pip
            ~/.platformio/.cache
        key: platformio-${{ github.run_id }}
        restore-keys: platformio # This matches above key as it is only used as a prefix. It restores the nearest cache
          
    - name: Cache PIO build files
      uses: actions/cache@v3.3.1
      with:
        path: ./code/.pio/
        key: build-${{ github.run_id }}
        restore-keys: build # This matches above key as it is only used as a prefix. It restores the nearest cache
          
    - name: Setup python environment
      uses: actions/setup-python@v4.6.1
      with:
        python-version: '3.10'

    - name: Install PlatformIO environment
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio

    - name: Build firmware
      #run: echo "Testing... ${{ github.ref_name }}, ${{ steps.vars.outputs.sha_short }}" > ./sd-card/html/version.txt; mkdir -p ./code/.pio/build/esp32cam/; cd ./code/.pio/build/esp32cam/; echo "${{ steps.vars.outputs.sha_short }}" > firmware.bin; cp firmware.bin partitions.bin; cp firmware.bin bootloader.bin # Testing
      run: cd code; platformio run --environment esp32cam

    - name: Prepare WebUI (Generate parameter tooltips + Update hash)
      run: |
        rm -rf ./html
        mkdir html
        cp -r ./sd-card/html/* ./html/

        python -m pip install markdown
        mkdir html/param-tooltips
        cd tools/parameter-tooltip-generator
        bash generate-param-doc-tooltips.sh
        cd ../..

        cp -r ./sd-card/html/* ./html/

        echo "Replacing variables..."
        cd html; find . -type f -exec sed -i 's/$COMMIT_HASH/${{ steps.vars.outputs.sha_short }}/g' {} \;
        
    - name: Save generated files
      uses: actions/cache/save@v3.3.1
      with:
        path: | 
          ./code/sdkconfig.defaults
          ./code/sdkconfig.esp32cam
          ./code/.pio/build/esp32cam/firmware.bin
          ./code/.pio/build/esp32cam/firmware.elf
          ./code/.pio/build/esp32cam/partitions.bin
          ./code/.pio/build/esp32cam/bootloader.bin
          ./html/*
        key: generated-files-${{ github.run_id }}

         

#########################################################################################
## Pack for OTA-Update
# Package to be used with OTA updater on WebUI
#
# Package content:
#  - /firmware.bin
#  - (optional) /html/* (inkl. subfolders)
#  - (optional) /config/*.tflite
#########################################################################################
  pack-for-OTA-update:
    runs-on: ubuntu-latest
    needs: [build]

    steps:
    - uses: actions/checkout@v3

    - name: Load generated-files
      uses: actions/cache/restore@v3.3.1
      with:
        path: | 
          ./code/sdkconfig.defaults
          ./code/sdkconfig.esp32cam
          ./code/.pio/build/esp32cam/firmware.bin
          ./code/.pio/build/esp32cam/firmware.elf
          ./code/.pio/build/esp32cam/partitions.bin
          ./code/.pio/build/esp32cam/bootloader.bin
          ./html/*
        key: generated-files-${{ github.run_id }}
        restore-keys: generated-files # This matches above key as it is only used as a prefix. It restores the nearest cache

    - name: Set variables
      id: vars
      run: |
        echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "branch=$(echo ${{ github.ref_name }} | tr / __)" >> $GITHUB_OUTPUT

    - name: Prepare update__*.zip artifact
      run: |
        rm -rf ./update
        mkdir -p ./update
        cp "./code/.pio/build/esp32cam/firmware.bin" "update/firmware.bin"

    - name: Add Web UI to update__*.zip artifact
      run: cp -r ./html ./update/

    - name: Add CNN to update__*.zip artifact
      run: |
        rm -rf ./update/config/
        mkdir -p ./update/config/
        cp ./sd-card/config/*.tfl ./update/config/ 2>/dev/null || true
        cp ./sd-card/config/*.tflite ./update/config/ 2>/dev/null || true

    - name: Upload update.zip artifact (Firmware + Web UI + CNN)
      uses: actions/upload-artifact@v3.1.2
      with:
        name: "AI-on-the-edge-device__update__SLFork__${{ steps.vars.outputs.branch }}_(${{ steps.vars.outputs.sha_short }})"
        path: ./update



#########################################################################################
## Pack for Full Setup -> Complete fresh install
# Create a full setup with all binaries and sd-card files to do an full setup by USB
#
# Package content:
#  - /firmware.bin
#  - /partitions.bin
#  - /bootloader.bin   
#  - sd-card.zip (Content for sd-card -> extract to root folder)
#  - /config/*.*
#########################################################################################
  pack-for-manual_setup:
    runs-on: ubuntu-latest
    needs: [build]

    steps:
    - uses: actions/checkout@v3

    - name: Load generated-files
      uses: actions/cache/restore@v3.3.1
      with:
        path: | 
          ./code/sdkconfig.defaults
          ./code/sdkconfig.esp32cam
          ./code/.pio/build/esp32cam/firmware.bin
          ./code/.pio/build/esp32cam/firmware.elf
          ./code/.pio/build/esp32cam/partitions.bin
          ./code/.pio/build/esp32cam/bootloader.bin
          ./html/*
        key: generated-files-${{ github.run_id }}
        restore-keys: generated-files # This matches above key as it is only used as a prefix. It restores the nearest cache

    - name: Set variables
      id: vars
      run: |
        echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "branch=$(echo ${{ github.ref_name }} | tr / __)" >> $GITHUB_OUTPUT

    - name: Prepare manual_setup__*.zip artifact
      run: |
        rm -rf manual_setup
        mkdir -p manual_setup
        rm -rf manual_setup/*.zip
        # copy builds to manual_setup folder
        cp -f "./code/.pio/build/esp32cam/firmware.bin" "manual_setup/firmware.bin"
        cp -f "./code/.pio/build/esp32cam/bootloader.bin" "manual_setup/bootloader.bin"
        cp -f "./code/.pio/build/esp32cam/partitions.bin" "manual_setup/partitions.bin"
        rm -rf ./sd-card/html
        cp -r ./html ./sd-card/ # Overwrite the Web UI with the preprocessed files
        cd sd-card; zip -r ../manual_setup/sd-card.zip *; cd ..
  
    - name: Upload manual_setup.zip artifact (Firmware + Bootloader + Partitions + Web UI)
      uses: actions/upload-artifact@v3.1.2
      with:
        name: "AI-on-the-edge-device__manual-setup__SLFork__${{ steps.vars.outputs.branch }}_(${{ steps.vars.outputs.sha_short }})"
        path: ./manual_setup



#########################################################################################
## Pack for initial 2-step setup (remote_setup)
# 1. WebUpdater: Install firmware binary
# 2. ESP Access Point: Install SD-Card content
#
# Package content:
#  - /html/* (inkl. subfolders)
#  - /config/*
#########################################################################################
  pack-for-remote_setup:
    runs-on: ubuntu-latest
    needs: [build]

    steps:
    - uses: actions/checkout@v3

    - name: Load generated-files
      uses: actions/cache/restore@v3.3.1
      with:
        path: | 
          ./code/sdkconfig.defaults
          ./code/sdkconfig.esp32cam
          ./code/.pio/build/esp32cam/firmware.bin
          ./code/.pio/build/esp32cam/firmware.elf
          ./code/.pio/build/esp32cam/partitions.bin
          ./code/.pio/build/esp32cam/bootloader.bin
          ./html/*
        key: generated-files-${{ github.run_id }}
        restore-keys: generated-files # This matches above key as it is only used as a prefix. It restores the nearest cache
          
    - name: Set variables
      id: vars
      run: |
        echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "branch=$(echo ${{ github.ref_name }} | tr / __)" >> $GITHUB_OUTPUT

    - name: Prepare remote_setup__*.zip artifact
      run: |
        rm -rf ./remote_setup
        mkdir -p ./remote_setup

    - name: Add Web UI to remote_setup
      run: cp -r ./html ./remote_setup/

    - name: Add whole config folder to remote_setup
      run: |
        rm -rf ./remote_setup/config/
        mkdir -p ./remote_setup/config/
        cp ./sd-card/config/* ./remote_setup/config/ 2>/dev/null || true

    - name: Upload remote_setup.zip artifact (Firmware + Web UI + Config)
      uses: actions/upload-artifact@v3.1.2
      with:
        name: "AI-on-the-edge-device__remote-setup__SLFork__${{ steps.vars.outputs.branch }}_(${{ steps.vars.outputs.sha_short }})"
        path: ./remote_setup



#########################################################################################
## Pack additional files for debugging purpose
#
# Package content:
# - firmware.elf
# - sdkconfig.defaults
# - sdkconfig.esp32cam
#########################################################################################
  pack-for-debugging:
    runs-on: ubuntu-latest
    needs: [build]

    steps:
    - uses: actions/checkout@v3

    - name: Load generated-files
      uses: actions/cache/restore@v3.3.1
      with:
        path: | 
          ./code/sdkconfig.defaults
          ./code/sdkconfig.esp32cam
          ./code/.pio/build/esp32cam/firmware.bin
          ./code/.pio/build/esp32cam/firmware.elf
          ./code/.pio/build/esp32cam/partitions.bin
          ./code/.pio/build/esp32cam/bootloader.bin
          ./html/*
        key: generated-files-${{ github.run_id }}
        restore-keys: generated-files # This matches above key as it is only used as a prefix. It restores the nearest cache
  
    - name: Set variables
      id: vars
      run: |
        echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "branch=$(echo ${{ github.ref_name }} | tr / __)" >> $GITHUB_OUTPUT

    - name: Prepare debug-files__*.zip artifact
      run: |
        rm -rf ./debug
        mkdir -p ./debug
        # copy builds to debug folder
        cp -f "./code/sdkconfig.defaults" "debug/sdkconfig.defaults"
        cp -f "./code/sdkconfig.esp32cam" "debug/sdkconfig.esp32cam"
        cp -f "./code/.pio/build/esp32cam/firmware.elf" "debug/firmware.elf"

    - name: Upload debug_files.zip artifact
      uses: actions/upload-artifact@v3.1.2
      with:
        name: "AI-on-the-edge-device__debug-files__SLFork__${{ steps.vars.outputs.branch }}_(${{ steps.vars.outputs.sha_short }})"
        path: ./debug


#########################################################################################
## Prepare and create release
#########################################################################################
  prepare-release:
    runs-on: ubuntu-latest
    needs: [build, pack-for-OTA-update, pack-for-manual_setup, pack-for-remote_setup, pack-for-debugging]
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      upload_url: ${{ steps.release.outputs.upload_url }}
      version: "${{steps.release.outputs.major}}.${{steps.release.outputs.minor}}.${{steps.release.outputs.patch}}"
    if: github.ref == 'refs/heads/build-workflow' || github.ref == 'refs/heads/develop' # Process only for specific branches
    steps:
      - uses: google-github-actions/release-please-action@v3
        id: release
        with:
          release-type: simple
          package-name: release-please-action
          draft-pull-request: false
          pull-request-header: ':robot: Gather changes for upcoming release'
          changelog-path: CHANGELOG.md
          changelog-types: '[
                             {"type":"feat","section":"Features"},
                             {"type":"fix","section":"Bug Fixes"},
                             {"type":"refactor","section":"Refactoring / Style Changes"},
                             {"type":"chore","section":"Other Changes"}
                            ]'
          skip-github-release: false # Skip internal release creation (Prepare artifacts first before create new release)
  
  upload-release-artifacts:
    runs-on: ubuntu-latest
    needs: [prepare-release]
    if: ${{ needs.prepare-release.outputs.release_created }}

    # Sets permissions of the GITHUB_TOKEN to allow updating the branches
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
    - uses: actions/checkout@v3

    - name: Download artifacts
      uses: dawidd6/action-download-artifact@v2
      with:
        # Optional, GitHub token, a Personal Access Token with `public_repo` scope if needed
        # Required, if the artifact is from a different repo
        # Required, if the repo is private a Personal Access Token with `repo` scope is needed or GitHub token in a job where the permissions `action` scope set to `read`
        github_token: ${{secrets.GITHUB_TOKEN}}

    - name: Set variables
      id: vars
      run: |
        echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "branch=$(echo ${{ github.ref_name }} | tr / __)" >> $GITHUB_OUTPUT

    - name: Prepare artifacts
      run: |
        rm -rf release
        mkdir -p release

        # AI-on-the-edge-device__OTA-update__*.zip (e.g. "AI-on-the-edge-device__OTA-update__v16.0.0.zip")
        cd ./update
        zip -r ../release/AI-on-the-edge-device__update__SLFork__${{ steps.vars.outputs.branch }}.zip .
        

        # AI-on-the-edge-device__manual-setup__*.zip (e.g. "AI-on-the-edge-device__manual-setup__v16.0.0.zip")
        cd ./manual_setup
        zip -r ../release/AI-on-the-edge-device__manual-setup__SLFork__${{ steps.vars.outputs.branch }}.zip .


        # AI-on-the-edge-device__remote-setup__*.zip (e.g. "AI-on-the-edge-device__remote-setup__v16.0.0.zip")
        cd ./remote_setup
        zip -r ../release/AI-on-the-edge-device__remote-setup__SLFork__${{ steps.vars.outputs.branch }}.zip .
        
        
        # AI-on-the-edge-device__debug-files__*.zip (e.g. "AI-on-the-edge-device__debug-files__v16.0.0.zip)"
        cd ./debug
        zip -r ../release/AI-on-the-edge-device__debug-files__SLFork__${{ steps.vars.outputs.branch }}.zip .

    - name: Upload artifacts
      uses: Roang-zero1/github-upload-release-artifacts-action@v2
      with:
        args: "release/*"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    # Releases should only be created by tagging the last commit (Tag commit performed by release-please action)
    # All artifacts in firmware folder pushed to the release
    #- name: Create release
    #  uses: softprops/action-gh-release@v1
    #  # Note:
    #  # If you get the error "Resource not accessible by integration",
    #  # The access rights are not sufficient, see
    #  # https://github.com/softprops/action-gh-release/issues/232#issuecomment-1131379440
    #  with:
    #    files: |
    #      release/*

name: Build and Release

on:
  push:
  pull_request:

jobs:
#########################################################################################
## Prepare release / Create reelase Part 1
#
# Use of release-please action to create a 'Release PR' which gets maintained automatically.
# After merging the 'Release PR', a new tag and release is getting created.
#########################################################################################
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      upload_url: ${{ steps.release.outputs.upload_url }}
      version: "${{steps.release.outputs.major}}.${{steps.release.outputs.minor}}.${{steps.release.outputs.patch}}"
      tag_name: ${{ steps.release.outputs.tag_name }} 
    steps:
      - uses: google-github-actions/release-please-action@v4
        id: release
        with:
          target-branch: build-workflow
          config-file: .release-please-config.json
          manifest-file: .release-please-manifest.json

#########################################################################################
## Build Firmware
#
# Build firmware and patch HTML files (parameter tooltips)
#########################################################################################
  build:
    runs-on: ubuntu-latest
    needs: [prepare-release]

    steps:
    - name: Checkout branch
      if: ${{ ! needs.prepare-release.outputs.release_created }}
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Checkout tag # checkout tagged version when build a release for this tag
      if: ${{ needs.prepare-release.outputs.release_created }}
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.prepare-release.outputs.tag_name }}
        submodules: recursive

    - name: Set variables
      id: vars
      run: |
        echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Cache pip & platformIO cache files
      uses: actions/cache@v4
      with:
        path: |
            ~/.cache/pip
            ~/.platformio/.cache
        key: platformio-${{ github.run_id }}
        restore-keys: platformio # This matches above key as it is only used as a prefix. It restores the nearest cache
          
    - name: Cache PIO build files
      if: ${{ ! needs.prepare-release.outputs.release_created }} # do not use cached data when building a release
      uses: actions/cache@v4
      with:
        path: ./code/.pio/
        key: build-${{ github.run_id }}
        restore-keys: build # This matches above key as it is only used as a prefix. It restores the nearest cache
          
    - name: Setup python environment
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install PlatformIO environment
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio

    - name: Build firmware
      #run: echo "Testing... ${{ github.ref }}, ${{ github.ref_name }}, ${{ steps.vars.outputs.sha_short }}, ${{ steps.vars.outputs.branch }}" > ./sd-card/html/version.txt; mkdir -p ./code/.pio/build/esp32cam/; cd ./code/.pio/build/esp32cam/; echo "${{ steps.vars.outputs.sha_short }}" > firmware.bin; cp firmware.bin partitions.bin; cp firmware.bin bootloader.bin # Testing
      run: cd code; platformio run --environment esp32cam

    - name: Prepare WebUI (Generate parameter tooltips + Update hash)
      run: |
        rm -rf ./html
        mkdir ./html

        python -m pip install markdown
        python ./tools/parameter-tooltip-generator/generate-param-doc-tooltips.py

        cp -r ./sd-card/html/* ./html/

        echo "Replacing variables..."
        cd ./html; find . -type f -exec sed -i 's/$COMMIT_HASH/${{ steps.vars.outputs.sha_short }}/g' {} \;

    - name: Save generated files
      uses: actions/cache/save@v4
      with:
        path: | 
          ./code/sdkconfig.defaults
          ./code/sdkconfig.esp32cam
          ./code/.pio/build/esp32cam/firmware.bin
          ./code/.pio/build/esp32cam/firmware.elf
          ./code/.pio/build/esp32cam/partitions.bin
          ./code/.pio/build/esp32cam/bootloader.bin
          ./html/*
        key: generated-files-${{ github.run_id }}

         

#########################################################################################
## Pack for OTA-Update
# Package to be used with OTA updater on WebUI
#
# Package contents:
#  - /firmware.bin
#  - (optional) /html/* (inkl. subfolders)
#  - (optional) /config/*.tflite
#########################################################################################
  pack-for-OTA-update:
    runs-on: ubuntu-latest
    needs: [build]

    steps:
    - uses: actions/checkout@v4

    - name: Load generated-files
      uses: actions/cache/restore@v4
      with:
        path: | 
          ./code/sdkconfig.defaults
          ./code/sdkconfig.esp32cam
          ./code/.pio/build/esp32cam/firmware.bin
          ./code/.pio/build/esp32cam/firmware.elf
          ./code/.pio/build/esp32cam/partitions.bin
          ./code/.pio/build/esp32cam/bootloader.bin
          ./html/*
        key: generated-files-${{ github.run_id }}
        restore-keys: generated-files # This matches above key as it is only used as a prefix. It restores the nearest cache

    - name: Set variables
      id: vars
      run: |
        echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "branch=$(echo ${{ github.ref_name }} | tr / __)" >> $GITHUB_OUTPUT

    - name: Prepare update__*.zip artifact
      run: |
        rm -rf ./update
        mkdir -p ./update
        cp "./code/.pio/build/esp32cam/firmware.bin" "update/firmware.bin"

    - name: Add Web UI to update__*.zip artifact
      run: cp -r ./html ./update/

    - name: Add CNN to update__*.zip artifact
      run: |
        rm -rf ./update/config/
        mkdir -p ./update/config/
        cp ./sd-card/config/*.tfl ./update/config/ 2>/dev/null || true
        cp ./sd-card/config/*.tflite ./update/config/ 2>/dev/null || true

    - name: Upload update.zip artifact (Firmware + Web UI + CNN)
      uses: actions/upload-artifact@v4
      with:
        name: "AI-on-the-edge-device__update__SLFork__${{ steps.vars.outputs.branch }}_(${{ steps.vars.outputs.sha_short }})"
        path: ./update



#########################################################################################
## Pack for Full Setup -> Complete fresh install
# Create a full setup with all binaries and sd-card files to do an full setup by USB
#
# Package contents:
#  - /firmware.bin
#  - /partitions.bin
#  - /bootloader.bin   
#  - sd-card.zip (Content for sd-card -> extract to root folder)
#  - /config/*.*
#########################################################################################
  pack-for-manual_setup:
    runs-on: ubuntu-latest
    needs: [build]

    steps:
    - uses: actions/checkout@v4

    - name: Load generated-files
      uses: actions/cache/restore@v4
      with:
        path: | 
          ./code/sdkconfig.defaults
          ./code/sdkconfig.esp32cam
          ./code/.pio/build/esp32cam/firmware.bin
          ./code/.pio/build/esp32cam/firmware.elf
          ./code/.pio/build/esp32cam/partitions.bin
          ./code/.pio/build/esp32cam/bootloader.bin
          ./html/*
        key: generated-files-${{ github.run_id }}
        restore-keys: generated-files # This matches above key as it is only used as a prefix. It restores the nearest cache

    - name: Set variables
      id: vars
      run: |
        echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "branch=$(echo ${{ github.ref_name }} | tr / __)" >> $GITHUB_OUTPUT

    - name: Prepare manual_setup__*.zip artifact
      run: |
        rm -rf manual_setup
        mkdir -p manual_setup
        rm -rf manual_setup/*.zip
        # copy builds to manual_setup folder
        cp -f "./code/.pio/build/esp32cam/firmware.bin" "manual_setup/firmware.bin"
        cp -f "./code/.pio/build/esp32cam/bootloader.bin" "manual_setup/bootloader.bin"
        cp -f "./code/.pio/build/esp32cam/partitions.bin" "manual_setup/partitions.bin"
        rm -rf ./sd-card/html
        cp -r ./html ./sd-card/ # Overwrite the Web UI with the preprocessed files
        cd sd-card; zip -r ../manual_setup/sd-card.zip *; cd ..
  
    - name: Upload manual_setup.zip artifact (Firmware + Bootloader + Partitions + Web UI)
      uses: actions/upload-artifact@v4
      with:
        name: "AI-on-the-edge-device__manual-setup__SLFork__${{ steps.vars.outputs.branch }}_(${{ steps.vars.outputs.sha_short }})"
        path: ./manual_setup



#########################################################################################
## Pack for initial 2-step setup (remote_setup)
# 1. WebUpdater: Install firmware binary
# 2. ESP Access Point: Install SD-Card content
#
# Package contents:
#  - /html/* (inkl. subfolders)
#  - /config/*
#########################################################################################
  pack-for-remote_setup:
    runs-on: ubuntu-latest
    needs: [build]

    steps:
    - uses: actions/checkout@v4

    - name: Load generated-files
      uses: actions/cache/restore@v4
      with:
        path: | 
          ./code/sdkconfig.defaults
          ./code/sdkconfig.esp32cam
          ./code/.pio/build/esp32cam/firmware.bin
          ./code/.pio/build/esp32cam/firmware.elf
          ./code/.pio/build/esp32cam/partitions.bin
          ./code/.pio/build/esp32cam/bootloader.bin
          ./html/*
        key: generated-files-${{ github.run_id }}
        restore-keys: generated-files # This matches above key as it is only used as a prefix. It restores the nearest cache
          
    - name: Set variables
      id: vars
      run: |
        echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "branch=$(echo ${{ github.ref_name }} | tr / __)" >> $GITHUB_OUTPUT

    - name: Prepare remote_setup__*.zip artifact
      run: |
        rm -rf ./remote_setup
        mkdir -p ./remote_setup

    - name: Add Web UI to remote_setup
      run: cp -r ./html ./remote_setup/

    - name: Add whole config folder to remote_setup
      run: |
        rm -rf ./remote_setup/config/
        mkdir -p ./remote_setup/config/
        cp ./sd-card/config/* ./remote_setup/config/ 2>/dev/null || true

    - name: Upload remote_setup.zip artifact (Firmware + Web UI + Config)
      uses: actions/upload-artifact@v4
      with:
        name: "AI-on-the-edge-device__remote-setup__SLFork__${{ steps.vars.outputs.branch }}_(${{ steps.vars.outputs.sha_short }})"
        path: ./remote_setup



#########################################################################################
## Pack additional files for debugging purpose
#
# Package contents:
# - firmware.elf
# - sdkconfig.defaults
# - sdkconfig.esp32cam
#########################################################################################
  pack-for-debugging:
    runs-on: ubuntu-latest
    needs: [build]

    steps:
    - uses: actions/checkout@v4

    - name: Load generated-files
      uses: actions/cache/restore@v4
      with:
        path: | 
          ./code/sdkconfig.defaults
          ./code/sdkconfig.esp32cam
          ./code/.pio/build/esp32cam/firmware.bin
          ./code/.pio/build/esp32cam/firmware.elf
          ./code/.pio/build/esp32cam/partitions.bin
          ./code/.pio/build/esp32cam/bootloader.bin
          ./html/*
        key: generated-files-${{ github.run_id }}
        restore-keys: generated-files # This matches above key as it is only used as a prefix. It restores the nearest cache
  
    - name: Set variables
      id: vars
      run: |
        echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "branch=$(echo ${{ github.ref_name }} | tr / __)" >> $GITHUB_OUTPUT

    - name: Prepare debug-files__*.zip artifact
      run: |
        rm -rf ./debug
        mkdir -p ./debug
        # copy builds to debug folder
        cp -f "./code/sdkconfig.defaults" "debug/sdkconfig.defaults"
        cp -f "./code/sdkconfig.esp32cam" "debug/sdkconfig.esp32cam"
        cp -f "./code/.pio/build/esp32cam/firmware.elf" "debug/firmware.elf"

    - name: Upload debug_files.zip artifact
      uses: actions/upload-artifact@v4
      with:
        name: "AI-on-the-edge-device__debug-files__SLFork__${{ steps.vars.outputs.branch }}_(${{ steps.vars.outputs.sha_short }})"
        path: ./debug



#########################################################################################
## Pack additional files for documentation
#
# Package contents:
# - pdf
#########################################################################################
  pack-for-API-docs:
    runs-on: ubuntu-latest
    needs: [prepare-release]

    steps:
    - uses: actions/checkout@v4

    - name: Prepare folder structure
      run: |
        mkdir -p ./pdf/API/REST
        mkdir -p ./pdf/API/MQTT

    #- name: Generate REST API docs
    #  uses: baileyjm02/markdown-to-pdf@v1
     # with:
     #   input_dir: ./docs/API/REST
     #   output_dir: ./pdf/API/REST
     #   build_html: false

   # - name: Generate MQTT API docs
   #   uses: baileyjm02/markdown-to-pdf@v1
   #   with:
   #     input_dir: ./docs/API/MQTT
   #     output_dir: ./pdf/API/MQTT
   #     build_html: false

    - name: Build REST API docs
      run: |-
        npm install -g md-to-pdf
        mkdir -p ./_output
        cd ./docs/API/REST
        echo; echo "Input Folder Listing"
        ls
        echo; echo "Generating PDF"
        for f in *.md; do cat $f; echo; done | md-to-pdf > ./_output/API_REST.pdf
        cd ../_output
        echo; echo "Output Folder Listing"
        ls
        cd ..

    - name: Build MQTT API docs
      run: |-
        #npm install -g md-to-pdf
        cd ./docs/API/MQTT
        echo; echo "Input Folder Listing"
        ls
        echo; echo "Generating PDF"
        for f in *.md; do cat $f; echo; done | md-to-pdf > ./_output/API_MQTT.pdf
        cd ../_output
        echo; echo "Output Folder Listing"
        ls
        cd ..

    - name: Set variables
      id: vars
      run: |
        echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "branch=$(echo ${{ github.ref_name }} | tr / __)" >> $GITHUB_OUTPUT

    - name: Upload doc-files.zip artifact
      uses: actions/upload-artifact@v4
      with:
        name: "AI-on-the-edge-device__doc-files__SLFork__${{ steps.vars.outputs.branch }}_(${{ steps.vars.outputs.sha_short }})"
        path: ./_output



#########################################################################################
## Create Release Part 2 - Upload related artifacts
#
# Artifacts will gets uploaded to newly created release tag.
#########################################################################################  
  upload-release-artifacts:
    runs-on: ubuntu-latest
    needs: [prepare-release, pack-for-OTA-update, pack-for-manual_setup, pack-for-remote_setup, pack-for-debugging, pack-for-API-docs]
    if: ${{ needs.prepare-release.outputs.release_created }}

    # Sets permissions of the GITHUB_TOKEN to allow downloading artifacts
    permissions:
      actions: read
      contents: write

    steps:
    - name: Checkout tag
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.prepare-release.outputs.tag_name }}
     
    - name: Set variables
      id: vars
      run: |
        echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "branch=$(echo ${{ github.ref_name }} | tr / __)" >> $GITHUB_OUTPUT
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
        
    - name: Rename artifacts
      run: |
        rm -rf release 
        mkdir -p release
        cd "AI-on-the-edge-device__update__SLFork__${{ steps.vars.outputs.branch }}_(${{ steps.vars.outputs.sha_short }})"
        zip -r ../release/AI-on-the-edge-device__update__SLFork__v${{ needs.prepare-release.outputs.version }}.zip *
        cd ..
        cd "AI-on-the-edge-device__manual-setup__SLFork__${{ steps.vars.outputs.branch }}_(${{ steps.vars.outputs.sha_short }})"
        zip -r ../release/AI-on-the-edge-device__manual-setup__SLFork__v${{ needs.prepare-release.outputs.version }}.zip *
        cd ..
        cd "AI-on-the-edge-device__remote-setup__SLFork__${{ steps.vars.outputs.branch }}_(${{ steps.vars.outputs.sha_short }})"
        zip -r ../release/AI-on-the-edge-device__remote-setup__SLFork__v${{ needs.prepare-release.outputs.version }}.zip *
        cd ..
        cd "AI-on-the-edge-device__debug-files__SLFork__${{ steps.vars.outputs.branch }}_(${{ steps.vars.outputs.sha_short }})"
        zip -r ../release/AI-on-the-edge-device__debug-files__SLFork__v${{ needs.prepare-release.outputs.version }}.zip *
        cd ..

    - name: Upload artifacts
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run:
        gh release upload ${{ needs.prepare-release.outputs.tag_name }} release/*
